package com.phani.demo;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Stream;

import org.apache.avro.AvroTypeException;
import org.apache.avro.Schema;
import org.apache.avro.Schema.Type;
import org.apache.avro.file.CodecFactory;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.file.DataFileWriter;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.generic.GenericRecord;
import org.apache.avro.io.*;
import org.apache.commons.io.FileUtils;


public class TestAvro {

    public static void main(String[] args) throws Exception {

        Schema schema = parseSchema();
        Map<String, List<String>> map = new java.util.HashMap();
        String[] xyz = {"a", "b"};
        List<String> aa = Arrays.asList(xyz);
        map.put("aa",aa);
        GenericData.Record rec = getGenRec(schema, "aa", xyz);
        List<GenericData.Record> recordList = new ArrayList<GenericData.Record>();
        recordList.add(rec);

        long t1 = System.currentTimeMillis();
        createAvroFile("/tmp/test.avro", schema, recordList);
        System.out.println("Done");
        appendToAvroFile("/tmp/test.avro", schema, recordList);
        System.out.println("Done AVRO");
        System.out.println(System.currentTimeMillis()-t1);

        readFromAvroFile("/tmp/test.avro");
        Map<String, List<String[]>> dataSourceKeyToMessages = new HashMap<>();

        String bigStr = "003000273,0,6,0.0,1209622.7,0.0,1.0,0.0,1.0,0.0,0.0,1209622.7,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,21108511715.0,20267519945.0,284.0,59.0,96.0,0.0,1.0,0.0,0.0,0.0,180.0,34.0,32.0,0.0,269.0,0.0,66.0,0.0,0.0,6.0,0.0,0.0,2.0,313684532.8,0.0,1198584.0,0.0,0.0,0.0,20543731656.0,6839103776.0,13678313112.0,0.0,17835947149.0,0.0,19457812207.0,0.0,0.0,3082082151.9,0.0,0.0,1000190153.0,1,7,0.0,197227390.94,0.0,2.0,1.0,1.0,0.0,176783924.06,20443466.88,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,14978663052.0,15623366379.0,226.0,58.0,69.0,0.0,3.0,0.0,0.0,0.0,163.0,25.0,24.0,0.0,208.0,0.0,68.0,0.0,0.0,6.0,0.0,0.0,2.0,1416368282.3,0.0,13162839.0,0.0,0.0,0.0,15443523341.0,5919441200.0,7809533768.0,0.0,12585083777.0,0.0,17480910839.0,0.0,0.0,385028614.73,0.0,0.0,151006200.0,2,8,0.0,375101887.5,0.0,2.0,1.0,0.0,0.0,15515527.5,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10641952029.0,10635016443.0,228.0,48.0,91.0,0.0,10.0,0.0,0.0,0.0,141.0,15.0,19.0,0.0,214.0,0.0,58.0,0.0,0.0,4.0,0.0,0.0,0.0,198483870.0,0.0,9176943.0,0.0,0.0,0.0,8728719325.2,5462224120.0,6878364213.4,0.0,6757659595.2,0.0,12862774563.0,0.0,0.0,1656534313.4,0.0,0.0,0.0,1,9,14042.0,979503658.29,2.0,6.0,6.0,2.0,0.0,978257312.19,1260388.1,0.0,3.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,21174039049.0,20015117637.0,271.0,66.0,89.0,2.0,7.0,0.0,0.0,0.0,182.0,27.0,30.0,0.0,248.0,0.0,74.0,2.0,0.0,5.0,2.0,3.0,3.0,922341813.0,226909.0,135987187.0,0.0,0.0,0.0,17757151027.0,5977729159.5,16395720591.0,0.0,15507769398.0,0.0,17688595001.0,3090000000.0,0.0,2750906483.1,139363.0,1406067.0,2150340374.0,1,10,0.0,402708708.19,0.0,1.0,1.0,0.0,0.0,402708708.19,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,16793928939.0,16362864131.0,321.0,59.0,79.0,2.0,6.0,0.0,0.0,0.0,242.0,25.0,26.0,0.0,304.0,0.0,65.0,0.0,0.0,6.0,0.0,1.0,4.0,260829842.03,318983.0,54005259.0,0.0,0.0,0.0,12943824501.0,4683125044.0,15214689441.0,0.0,11424441157.0,0.0,16282711786.0,0.0,0.0,4696068001.9,0.0,1575000.0,751997125.0,0,11,0.0,24323466.44,0.0,3.0,0.0,3.0,0.0,0.0,24323466.44,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,30675742404.0,29512780491.0,283.0,70.0,56.0,0.0,4.0,0.0,0.0,0.0,225.0,33.0,35.0,0.0,257.0,0.0,77.0,4.0,0.0,9.0,0.0,1.0,5.0,325558546.0,0.0,28526680.0,0.0,0.0,0.0,24828362182.0,13254913068.0,21751162419.0,0.0,18923250761.0,0.0,30056992099.0,2660000000.0,0.0,6161276098.5,0.0,1000000.0,2386003937.0,3,12,122445.17,558756430.92,2.0,2.0,3.0,0.0,0.0,558757430.92,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,21302978628.0,21741217752.0,232.0,61.0,44.0,2.0,5.0,0.0,0.0,0.0,192.0,18.0,32.0,0.0,219.0,0.0,63.0,3.0,0.0,4.0,0.0,0.0,4.0,323595756.5,110780.0,3598532.0,0.0,0.0,0.0,22462431176.0,4638264750.0,15616195386.0,0.0,18643274611.0,0.0,17447738502.0,2570000000.0,0.0,2430683266.5,0.0,0.0,1952500000.0,0,13,1655540.28,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15181564108.0,15253861411.0,142.0,52.0,32.0,4.0,2.0,0.0,0.0,0.0,109.0,26.0,21.0,0.0,121.0,0.0,62.0,1.0,0.0,7.0,1.0,0.0,2.0,172451772.56,750111.0,906651.0,0.0,0.0,0.0,12950807052.0,6274264914.1,11036245018.0,0.0,10166300040.0,0.0,15816850995.0,1140000000.0,0.0,3311127952.8,200449.0,0.0,946082.0,1,14,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,31015665931.0,30615379772.0,175.0,77.0,40.0,0.0,5.0,0.0,0.0,0.0,138.0,55.0,14.0,0.0,142.0,0.0,97.0,1.0,0.0,9.0,0.0,0.0,3.0,1533211807.8,0.0,4785126.0,0.0,0.0,0.0,10530212872.0,45490638003.0,4072197894.5,0.0,8040372620.8,0.0,51155330971.0,380000000.0,0.0,1941779611.5,0.0,0.0,113562500.0,2,15,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9617856565.5,10001096228.0,134.0,37.0,28.0,1.0,5.0,0.0,0.0,0.0,109.0,12.0,16.0,0.0,125.0,0.0,43.0,0.0,0.0,1.0,0.0,0.0,2.0,86801108.08,200000.0,223528.0,0.0,0.0,0.0,8393600772.0,5708590000.0,5429537385.5,0.0,6779094232.0,0.0,12408641228.0,0.0,0.0,280057333.48,0.0,0.0,151160000.0,4,16,0.0,374519.84,0.0,1.0,0.0,1.0,0.0,0.0,374519.84,0.0,1.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,6848677204.5,6797762225.0,119.0,41.0,29.0,0.0,6.0,0.0,0.0,0.0,91.0,24.0,10.0,0.0,97.0,0.0,55.0,0.0,0.0,5.0,0.0,1.0,2.0,506644117.68,0.0,28189044.0,0.0,0.0,0.0,5538795544.8,5557793865.0,2015016858.0,0.0,3707175250.5,0.0,9272035722.0,0.0,0.0,665805453.99,0.0,262853.0,1160150.0,1,17,648810.0,15955187.11,1.0,1.0,2.0,0.0,0.0,16603997.11,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10643371982.0,9987823298.2,125.0,61.0,36.0,0.0,4.0,0.0,0.0,0.0,81.0,53.0,12.0,0.0,93.0,0.0,76.0,1.0,0.0,6.0,0.0,0.0,10.0,1713198323.3,0.0,3089968.0,0.0,0.0,0.0,8208831488.5,7521452226.2,3184623274.2,0.0,5512665450.9,0.0,12382819196.0,850000000.0,0.0,1835170520.2,0.0,0.0,50540113.0,0,18,0.0,11231405.1,0.0,2.0,0.0,2.0,0.0,0.0,11231405.1,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7803001131.8,7982499649.3,120.0,56.0,26.0,0.0,4.0,0.0,0.0,0.0,105.0,28.0,13.0,0.0,101.0,0.0,63.0,0.0,0.0,8.0,0.0,1.0,3.0,2333066243.0,0.0,745261.0,0.0,0.0,0.0,7911242184.7,3122686963.0,2417760129.4,0.0,6216720616.4,0.0,8505277864.3,0.0,0.0,1042096512.4,0.0,1250000.0,20155788.0,1,19,0.0,225112140.0,0.0,1.0,1.0,0.0,0.0,225112140.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5248137185.9,5531476798.4,152.0,49.0,29.0,0.0,5.0,0.0,0.0,0.0,117.0,27.0,23.0,0.0,133.0,0.0,61.0,0.0,0.0,2.0,0.0,1.0,4.0,58728907.2,0.0,6478887.0,0.0,0.0,0.0,4092937525.5,1411655231.1,5209813433.4,0.0,3194705177.5,0.0,6452449155.4,0.0,0.0,1100222287.4,0.0,178560.0,32058804.0,1,20,0.0,654256.08,0.0,1.0,0.0,1.0,0.0,0.0,654256.08,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4192534192.2,4201901110.5,119.0,42.0,26.0,1.0,4.0,0.0,0.0,0.0,89.0,29.0,12.0,0.0,107.0,0.0,40.0,0.0,0.0,2.0,0.0,1.0,11.0,240980054.5,193421.0,23700620.0,0.0,0.0,0.0,3695971668.5,3634366674.2,799222864.47,0.0,3283600490.0,0.0,3573419707.2,0.0,0.0,330067518.47,0.0,1250000.0,1206097587.0,0,21,0.0,3362189820.6,0.0,5.0,4.0,1.0,0.0,3359667758.4,2522062.24,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7380199994.8,2681984979.0,140.0,45.0,31.0,0.0,19.0,0.0,0.0,0.0,102.0,20.0,13.0,0.0,116.0,0.0,63.0,0.0,0.0,3.0,0.0,2.0,1.0,111683073.28,0.0,29237483.0,0.0,0.0,0.0,3954973764.1,3425357197.0,2540933456.4,0.0,2497943117.4,0.0,5974824730.0,0.0,0.0,1587596576.4,0.0,1208300.0,612250.0,1,22,0.0,35315.98,0.0,1.0,0.0,1.0,0.0,0.0,35315.98,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,6661050798.0,7506581755.0,131.0,35.0,30.0,1.0,7.0,0.0,0.0,0.0,96.0,15.0,17.0,0.0,116.0,0.0,45.0,0.0,0.0,3.0,0.0,2.0,0.0,94771710.13,10000.0,43402275.0,0.0,0.0,0.0,7357218356.0,593501290.0,6078728921.9,0.0,5902090459.2,0.0,7619220375.0,0.0,0.0,644321718.85,0.0,2000000.0,0.0,1,23,0.0,471030254.0,0.0,3.0,1.0,2.0,0.0,469897821.0,1132433.0,0.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8370360887.2,7024834823.7,138.0,44.0,28.0,2.0,3.0,0.0,0.0,0.0,107.0,31.0,11.0,0.0,124.0,0.0,43.0,0.0,0.0,4.0,0.0,3.0,8.0,993152680.0,297572.0,14476912.0,0.0,0.0,0.0,8668450357.9,3093315370.0,2625502819.0,0.0,8268715268.2,0.0,5818455768.7,0.0,0.0,121145359.0,0.0,2547572.0,1184331743.0,0,24,0.0,5304173.02,0.0,3.0,0.0,3.0,0.0,0.0,5304173.02,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9577146248.1,9832794487.0,154.0,84.0,28.0,2.0,4.0,0.0,0.0,0.0,118.0,65.0,21.0,0.0,137.0,0.0,62.0,0.0,0.0,2.0,0.0,4.0,33.0,70239941.74,297572.0,59312360.0,0.0,0.0,0.0,11141213510.0,2122069497.0,6016807854.7,0.0,9378467287.4,0.0,9790981327.0,0.0,0.0,202678040.72,0.0,3700000.0,34114080.0,0,25,0.0,495785.68,0.0,1.0,0.0,1.0,0.0,0.0,495785.68,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13743228651.0,13400100375.0,157.0,53.0,38.0,2.0,14.0,0.0,0.0,0.0,114.0,22.0,20.0,0.0,132.0,0.0,68.0,0.0,0.0,0.0,0.0,4.0,6.0,132029630.0,259557.0,1775423995.0,0.0,0.0,0.0,17929739610.0,1572170501.0,5733705733.0,0.0,10450990296.0,0.0,16498375931.0,0.0,0.0,0.0,0.0,2683412.0,191279387.0,0,26,0.0,435555029.74,0.0,1.0,1.0,0.0,0.0,435555029.74,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,12677632052.0,12643598633.0,129.0,50.0,25.0,0.0,1.0,0.0,0.0,0.0,113.0,24.0,16.0,0.0,116.0,0.0,51.0,1.0,0.0,3.0,0.0,4.0,4.0,56603886.1,0.0,2156000.0,0.0,0.0,0.0,13641301669.0,2664760854.0,8956408275.6,0.0,9643800327.9,0.0,12571834878.0,2000000000.0,0.0,1100323800.6,0.0,3299850.0,1971828.0,1,27,6796.0,295188070.12,1.0,2.0,2.0,1.0,0.0,291434589.77,3760276.35,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,8852789822.6,8555548230.4,148.0,56.0,25.0,2.0,3.0,0.0,0.0,0.0,126.0,34.0,14.0,0.0,129.0,0.0,63.0,0.0,0.0,7.0,0.0,4.0,1.0,151901544.5,124925.0,10631594.0,0.0,0.0,0.0,10353291910.0,3373685807.0,3518702272.0,0.0,8278714160.6,0.0,8681950502.4,0.0,0.0,443071993.0,0.0,3745000.0,856397.0,0,28,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7087634604.5,7186881054.7,130.0,44.0,26.0,1.0,2.0,0.0,0.0,0.0,103.0,27.0,15.0,0.0,109.0,0.0,53.0,0.0,0.0,2.0,0.0,7.0,3.0,89840311.0,49970.0,2767017.0,0.0,0.0,0.0,5352720410.2,2521539632.0,6307598318.9,0.0,3933439961.6,0.0,9451800479.7,0.0,0.0,682551960.94,0.0,6663157.0,200060100.0,0,29,0.0,1729980.0,0.0,1.0,0.0,1.0,0.0,0.0,1729980.0,0.0,3.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,11662386132.0,11609222294.0,174.0,109.0,29.0,1.0,3.0,0.0,0.0,0.0,130.0,85.0,35.0,0.0,154.0,0.0,61.0,0.0,0.0,2.0,0.0,7.0,59.0,85746718.73,5000.0,11976817.0,0.0,0.0,0.0,12858370277.0,3077552142.0,7237957472.1,0.0,10193549528.0,0.0,11661185405.0,0.0,0.0,1370320243.1,0.0,4250000.0,42303250.0,0,30,0.0,869652.0,0.0,1.0,0.0,1.0,0.0,0.0,869652.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10665496253.0,10686054198.0,176.0,39.0,31.0,1.0,1.0,0.0,0.0,0.0,132.0,24.0,26.0,0.0,157.0,0.0,45.0,0.0,0.0,4.0,0.0,5.0,4.0,2138301333.0,34000.0,319006.0,0.0,0.0,0.0,13571222009.0,1637137400.0,4004536703.2,0.0,9533516536.7,0.0,11436426906.0,0.0,0.0,371374298.19,0.0,4224925.0,6007785.0,0,31,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,13508200852.0,13481302393.0,167.0,63.0,35.0,0.0,1.0,0.0,0.0,0.0,134.0,32.0,28.0,0.0,153.0,0.0,67.0,0.0,0.0,2.0,0.0,5.0,3.0,188598767.26,0.0,727884.0,0.0,0.0,0.0,15163097305.0,1033130841.8,10603948447.0,0.0,13372895338.0,0.0,13363519771.0,0.0,0.0,129522073.0,0.0,3322000.0,120244063.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0";
//        List<String[]> dataForKey1 = new ArrayList<>();
//        dataForKey1.add(bigStr.split(","));
//        dataSourceKeyToMessages.put("1", dataForKey1);

//        List<String[]> dataForKey2 = new ArrayList<>();
//        dataForKey2.add(xyz);
//        dataForKey2.add(xyz);
//        dataSourceKeyToMessages.put("2", dataForKey2);

        String fileName = "/Users/phaneendra/Downloads/prob.csv";

        String path = "/tmp/test/topic1/";
        FileUtils.forceMkdir(new File(path));

        //read file into stream, try-with-resources
        try (Stream<String> stream = Files.lines(Paths.get(fileName))) {

            stream.forEach(x->{
                String[] data = x.split(",");
                List<String[]> dataFor = new ArrayList<>();
                dataFor.add(data);
                dataSourceKeyToMessages.put(data[0], dataFor);


                if(dataSourceKeyToMessages.size()>10000){

                    try {
                        writeDataToFiles(dataSourceKeyToMessages,schema,path);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    dataSourceKeyToMessages.clear();
                    System.out.println("clear");

                }
            });

        } catch (Exception e) {
            e.printStackTrace();
        }

        for(File leftPartFile:new File(path).listFiles()){
            Map<String, List<List<String>>> leftData = AvroUtil.readFromAvroFile(leftPartFile);
            System.out.println(leftData.size());
        }





    }

    private static void readFromAvroFile(String file) throws IOException {
        GenericDatumReader datum = new GenericDatumReader();
        DataFileReader reader = new DataFileReader(new File(file), datum);

        GenericData.Record record = new GenericData.Record(reader.getSchema());
        while (reader.hasNext()) {
            reader.next(record);
            System.out.println("Key " + record.get("key") +" :: ");
            List<String> content = (List<String>) record.get("content");
            System.out.println(content);
        }

        reader.close();
    }

    private static void writeDataToFiles(Map<String, List<String[]>> dataSourceKeyToMessages, Schema schema, String path) throws Exception {

        Map<String, List<GenericData.Record>> fileToDataMap = new HashMap<>();
        for(Map.Entry<String, List<String[]>> entry:dataSourceKeyToMessages.entrySet())
        {
            String fileName = getFileNameFromKey(entry.getKey());
            List<GenericData.Record> recordList = fileToDataMap.computeIfAbsent(fileName, k -> new ArrayList<>());
            recordList.addAll(AvroUtil.getGenRec(schema,entry.getKey(), entry.getValue()));
        }
        //loop through file data and dump To Files
        for(Map.Entry<String, List<GenericData.Record>> fileToData:fileToDataMap.entrySet()){
            AvroUtil.writeToAVROFile(path+fileToData.getKey(),fileToData.getValue());
        }

    }

    private static String getFileNameFromKey(String key){
        int code = key.hashCode();
        return "" + String.valueOf(code).chars().map(Character::getNumericValue).sum();
    }

    public static File createAvroFile(String fileName, Schema schema, List<GenericData.Record> recordList) throws Exception {
        final File target = new File(fileName);

        try (DataFileWriter<Object> writer = new DataFileWriter<>(new GenericDatumWriter<>(schema))) {

            writer.setCodec(CodecFactory.deflateCodec(9));
            writer.create(schema, target);

            for (GenericData.Record rec:recordList) {
                writer.append(rec);
                writer.flush();
            }
        }

        return target;
    }

    public static File appendToAvroFile(String fileName, Schema schema, List<GenericData.Record> recordList) throws Exception {
        final File target = new File(fileName);

        try (DataFileWriter<Object> writer = new DataFileWriter<>(new GenericDatumWriter<>(schema))) {

            writer.setCodec(CodecFactory.deflateCodec(5));
            //writer.create(schema, target);
            writer.appendTo(target);
            for (GenericData.Record rec:recordList) {
                writer.append(rec);
            }
        }

        return target;
    }


    private static GenericData.Record getGenRec(Schema schema, String key, String[] value) throws IOException {
        GenericData.Record avroRec = new GenericData.Record(schema);
        avroRec.put("key", key);
        avroRec.put("content", Arrays.asList(value));
        return avroRec;
    }



    private static Schema parseSchema() {
        Schema.Parser parser = new    Schema.Parser();
        Schema schema = null;
        try {
            // pass path to schema
            schema = parser.parse("{\n" +
                    " \"type\": \"record\",\n" +
                    " \"name\": \"dataRecords\",\n" +
                    " \"doc\": \"Records\",\n" +
                    " \"fields\": \n" +
                    "  [{\n" +
                    "   \"name\": \"key\", \n" +
                    "   \"type\": \"string\"\n" +
                    "   \n" +
                    "  }, \n" +
                    "  {\n" +
                    "   \"name\": \"content\",\n" +
                    "   \"type\": { \n" +
                    "      \"type\": \"array\",\n" +
                    "      \"items\": \"string\"\n" +
                    "   } \n" +
                    "  }\n" +
                    " ]\n" +
                    "}");




        } catch (Exception e) {
            e.printStackTrace();
        }
        return schema;

    }

}
